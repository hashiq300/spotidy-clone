// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Artist {
  id    String @id @default(cuid())
  name  String
  songs Song[]

  @@index([name], name: "artist_name")
  @@map("spotify_artists")
}

model Song {
  id          String @id @default(cuid())
  title        String
  artist      Artist? @relation(fields: [artistId], references: [id], onDelete: SetNull)
  artistId    String?
  image       String
  songUrl    String
  uploadedBy User   @relation(fields: [uploadedById], references: [id], onDelete: Restrict)
  uploadedById String
  likedBy     LikedSong[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  releaseDate DateTime


  @@index([title], name: "song_title")
  @@map("spotify_songs")
}

model EmailWhitelist {
  email     String   @id
  createdAt DateTime @default(now())

  @@map("spotify_email_whitelist")
}

model LikedSong {
  id          String @id @default(cuid())
  song        Song   @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId      String
  likedBy     User   @relation(fields: [likedById], references: [id], onDelete: Cascade)
  likedById   String
  createdAt   DateTime @default(now())

  @@unique([songId, likedById])
  @@map("spotify_liked_songs")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("spotify_accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("spotify_sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  uploadedSongs         Song[]
  likedSongs    LikedSong[]

  @@map("spotify_users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("spotify_verification_tokens")
}
